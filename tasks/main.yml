- apt_repository: repo='ppa:brightbox/ruby-ng-experimental' state=present
- apt_repository: repo='ppa:pitti/systemd' state=present

- name: Install deps
  apt: pkg={{ item }} state=present update_cache=yes
  with_items:
    - libxml2
    - ruby2.0
    - ruby2.0-dev
    - libxslt1-dev
    - python-pip

- name: install riemann-tools
  gem:
    name: "{{ item }}"
    user_install: no
  with_items:
    - riemann-tools
    - riemann-client

- name: install extra gems
  gem:
    name: "{{ item }}"
    user_install: no
  with_items:
    "{{ riemann_extra_gems }}"

- set_fact: riemann_use_system_d={{(ansible_distribution == 'Debian' and ansible_distribution_version | version_compare('8', '>=')) or (ansible_distribution == 'CentOS' and ansible_distribution_version | version_compare('7', '>=')) or (ansible_distribution == 'Ubuntu' and ansible_distribution_version | version_compare('15', '>=')) }}
  tags:
    - always

- fail: msg="This system does not use systemd, not continuing."
  when: not riemann_use_system_d

# to make sure any systemd service in the old naming convention (with _ instead of -) is disabled
- name: check if legacy systemd service exists
  stat:
    path: /etc/systemd/system/riemann_health.service
  register:
    legacy_systemd

- name: disable legacy systemd service
  service:
    name: riemann_health
    enabled: no
    state: stopped
  when: legacy_systemd.stat.exists == True

- name: remove legacy systemd file
  file:
    path: /etc/systemd/system/riemann_health.service
    state: absent
  when: legacy_systemd.stat.exists == True
# end of disabling legacy systemd service

- name: Copy Riemann Systemd File for Instance
  template:
    src: riemann.service.j2
    dest: "{{system_d_config_dir}}/system/{{ item }}.service"
    mode: 0644
  when: riemann_use_system_d
  notify: reload riemann_health
  with_items:
    - "{{ riemann_systemd_plugins }}"
